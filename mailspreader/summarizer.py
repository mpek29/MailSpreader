from transformers import pipeline
import re


def render_progress_bar(
    current: int, total: int, prefix: str = "", length: int = 50
) -> None:
    """
    Display a terminal progress bar.

    Args:
        current (int): Current iteration (1-based).
        total (int): Total iterations.
        prefix (str): Optional prefix label.
        length (int): Character length of the progress bar.
    """
    progress = current / total
    filled_length = int(length * progress)
    bar = "█" * filled_length + "-" * (length - filled_length)
    percent = f"{progress * 100:6.2f}%"
    print(f"\r{prefix} |{bar}| {percent} ({current}/{total})", end="", flush=True)
    if current == total:
        print()


def extract_summary_from_output(output_text: str) -> str:
    """
    Extract the generated summary sentence from model output.

    Args:
        output_text (str): Raw text generated by the model.

    Returns:
        str: Cleaned summary sentence.
    """
    match = re.search(r"(Sentence:)(.*)", output_text, re.DOTALL)
    if not match:
        return ""

    sentence_fragment = match.group(2).strip()
    keyword = "specialises" if "specialises" in sentence_fragment else "specializes"
    keyword_index = sentence_fragment.find(keyword)

    if keyword_index == -1:
        return ""

    sentence = sentence_fragment[keyword_index:]
    sentence = sentence.rsplit(".", 1)[0]  # Remove trailing content after the last period

    return sentence.strip()


def generate_summaries(descriptions: list[str]) -> list[str]:
    """
    Generate one-sentence summaries for a list of company descriptions.

    Args:
        descriptions (list[str]): List of company description strings.

    Returns:
        list[str]: List of summary sentences.
    """
    summarizer = pipeline("text-generation", model="TinyLlama/TinyLlama-1.1B-Chat-v1.0")
    summaries = []

    for idx, description in enumerate(descriptions):
        prompt = (
            "Based on the company description below, write one single sentence "
            "that starts exactly like this:\n"
            "\"I'm looking forward to starting my work placement with your company, [COMPANY NAME], which specialises in \"\n"
            "and then continue with the company’s main area of expertise, using concise wording.\n\n"
            f"Company description:\n{description}\nSentence:"
        )

        result = summarizer(prompt, max_new_tokens=60, do_sample=False)
        raw_output = result[0]["generated_text"]
        summary = extract_summary_from_output(raw_output)

        summaries.append(summary)
        render_progress_bar(current=idx + 1, total=len(descriptions), prefix="Summarizing", length=50)

    return summaries